package org.example.dabashou_spring_demo.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.CallCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AlgoRegistry extends Contract {
    public static final String[] BINARY_ARRAY = {"","1061052a5761052a610876565b60200260200101516040518263ffffffff1660e01b815260040161054e9190610ad1565b602060405180830381865afa15801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f9190610bfa565b925061100f6001600160a01b031663cfb5192885602001516001815181106105b9576105b9610876565b60200260200101516040518263ffffffff1660e01b81526004016105dd9190610ad1565b602060405180830381865afa1580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190610bfa565b9150836020015160028151811061063757610637610876565b602002602001015190505b919790965090945092505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561068957610689610650565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106b8576106b8610650565b604052919050565b600067ffffffffffffffff8211156106da576106da610650565b50601f01601f191660200190565b600082601f8301126106f957600080fd5b813561070c610707826106c0565b61068f565b81815284602083860101111561072157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561075057600080fd5b813567ffffffffffffffff81111561076757600080fd5b610773848285016106e8565b949350505050565b6000806000806080858703121561079157600080fd5b84359350602085013567ffffffffffffffff808211156107b057600080fd5b6107bc888389016106e8565b94506040870135935060608701359150808211156107d957600080fd5b506107e6878288016106e8565b91505092959194509250565b60005b8381101561080d5781810151838201526020016107f5565b8381111561081c576000848401525b50505050565b6000815180845261083a8160208601602086016107f2565b601f01601f19169290920160200192915050565b83815282602082015260606040820152600061086d6060830184610822565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561092d57603f198a8503018652825160608151600981106108e757634e487b7160e01b85526021600452602485fd5b8652818a01518a87018290526108ff82880182610822565b915050888201519150858103898701526109198183610822565b978a019795505050918701916001016108b4565b50919998505050505050505050565b60006020828403121561094e57600080fd5b815163ffffffff8116811461096257600080fd5b9392505050565b600082601f83011261097a57600080fd5b8151610988610707826106c0565b81815284602083860101111561099d57600080fd5b6107738260208301602087016107f2565b6000602082840312156109c057600080fd5b815167ffffffffffffffff8111156109d757600080fd5b61077384828501610969565b6000602080835283516040828501526109ff6060850182610822565b82860151601f198683038101604088015281518084529293509084019183850190600581901b8501860160005b82811015610a585784878303018452610a46828751610822565b95880195938801939150600101610a2c565b509998505050505050505050565b600060208284031215610a7857600080fd5b81518060030b811461096257600080fd5b60008251610a9b8184602087016107f2565b9190910192915050565b606081526000610ab86060830186610822565b90508360208301528260030b6040830152949350505050565b6020815260006109626020830184610822565b60006020808385031215610af757600080fd5b825167ffffffffffffffff80821115610b0f57600080fd5b9084019060408287031215610b2357600080fd5b610b2b610666565b825182811115610b3a57600080fd5b610b4688828601610969565b8252508383015182811115610b5a57600080fd5b80840193505086601f840112610b6f57600080fd5b825182811115610b8157610b81610650565b8060051b610b9086820161068f565b918252848101860191868101908a841115610baa57600080fd5b87870192505b83831015610be657825186811115610bc85760008081fd5b610bd68c8a838b0101610969565b8352509187019190870190610bb0565b968401969096525090979650505050505050565b600060208284031215610c0c57600080fd5b505191905056fea2646970667358221220dc5eb18ccb4be602e33afc795bcbbcd613eeb6a9556a10be43816dbf15d4661f64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","823e601f3d908101601f191682016040526105399190810190610af0565b8160200151600181518110610550576105506109eb565b6020026020010181905250828160200151600281518110610573576105736109eb565b6020908102919091010152600080546040516304c8b95360e41b81526001600160a01b0390911690634c8b9530906105af908590600401610b25565b6020604051808303816000875af11580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f29190610ba8565b905084866040516106039190610bcb565b60405180910390207fbc723205ab0b392cbc0ab47be1909c9c2e13d9eb25454fce4008ebe76a105953868a8560405161063e93929190610be7565b60405180910390a39695505050505050565b63b95aa35560e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561068957610689610650565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106b8576106b8610650565b604052919050565b600067ffffffffffffffff8211156106da576106da610650565b50601f01601f191660200190565b600082601f8301126106f957600080fd5b813561070c610707826106c0565b61068f565b81815284602083860101111561072157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561075057600080fd5b813567ffffffffffffffff81111561076757600080fd5b610773848285016106e8565b949350505050565b60005b8381101561079657818101518382015260200161077e565b838111156107a5576000848401525b50505050565b600081518084526107c381602086016020860161077b565b601f01601f19169290920160200192915050565b8381528260208201526060604082015260006107f660608301846107ab565b95945050505050565b6000806000806080858703121561081557600080fd5b84359350602085013567ffffffffffffffff8082111561083457600080fd5b610840888389016106e8565b945060408701359350606087013591508082111561085d57600080fd5b5061086a878288016106e8565b91505092959194509250565b60208152600061088960208301846107ab565b9392505050565b600082601f8301126108a157600080fd5b81516108af610707826106c0565b8181528460208386010111156108c457600080fd5b61077382602083016020870161077b565b600060208083850312156108e857600080fd5b825167ffffffffffffffff8082111561090057600080fd5b908401906040828703121561091457600080fd5b61091c610666565b82518281111561092b57600080fd5b61093788828601610890565b825250838301518281111561094b57600080fd5b80840193505086601f84011261096057600080fd5b82518281111561097257610972610650565b8060051b61098186820161068f565b918252848101860191868101908a84111561099b57600080fd5b87870192505b838310156109d7578251868111156109b95760008081fd5b6109c78c8a838b0101610890565b83525091870191908701906109a1565b968401969096525090979650505050505050565b63b95aa35560e01b600052603260045260246000fd5b600060208284031215610a1357600080fd5b5051919050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610abb57603f198a850301865282516060815160098110610a755763b95aa35560e01b85526021600452602485fd5b8652818a01518a8701829052610a8d828801826107ab565b91505088820151915085810389870152610aa781836107ab565b978a01979550505091870191600101610a42565b50919998505050505050505050565b600060208284031215610adc57600080fd5b815163ffffffff8116811461088957600080fd5b600060208284031215610b0257600080fd5b815167ffffffffffffffff811115610b1957600080fd5b61077384828501610890565b600060208083528351604082850152610b4160608501826107ab565b82860151601f198683038101604088015281518084529293509084019183850190600581901b8501860160005b82811015610b9a5784878303018452610b888287516107ab565b95880195938801939150600101610b6e565b509998505050505050505050565b600060208284031215610bba57600080fd5b81518060030b811461088957600080fd5b60008251610bdd81846020870161077b565b9190910192915050565b606081526000610bfa60608301866107ab565b90508360208301528260030b604083015294935050505056fea2646970667358221220c4b54f5eddd79bec4cb5169b47f91bedcf2ffca0f51a205136108266e5c3281b64736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_algoData\",\"outputs\":[{\"internalType\":\"contract AlgoData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"algoID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"algoHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"comments\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"res\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"algoID\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC__ALGODATA = "_algoData";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    protected AlgoRegistry(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public String _algoData() throws ContractException {
        final Function function = new Function(FUNC__ALGODATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public void _algoData(CallCallback callback) throws ContractException {
        final Function function = new Function(FUNC__ALGODATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt register(BigInteger timestamp, String algoID, byte[] algoHash,
            String comments) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(timestamp), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(algoID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(algoHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(comments)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRegister(BigInteger timestamp, String algoID,
            byte[] algoHash, String comments) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(timestamp), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(algoID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(algoHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(comments)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String register(BigInteger timestamp, String algoID, byte[] algoHash, String comments,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(timestamp), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(algoID), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(algoHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(comments)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple4<BigInteger, String, byte[], String> getRegisterInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, String, byte[], String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<BigInteger, byte[], String> select(String algoID) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(algoID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, byte[], String>(
                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public void select(String algoID, CallCallback callback) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(algoID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        asyncExecuteCall(function, callback);
    }

    public static AlgoRegistry load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new AlgoRegistry(contractAddress, client, credential);
    }

    public static AlgoRegistry deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(AlgoRegistry.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }
}
