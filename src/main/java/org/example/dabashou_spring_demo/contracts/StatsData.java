package org.example.dabashou_spring_demo.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.StaticStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.CallCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class StatsData extends Contract {
    public static final String[] BINARY_ARRAY = {"","","850152611ad760608501826119b1565b82860151601f198683038101604088015281518084529293509084019183850190600581901b8501860160005b82811015611b305784878303018452611b1e8287516119b1565b95880195938801939150600101611b04565b509998505050505050505050565b600060208284031215611b5057600080fd5b81518060030b811461053f57600080fd5b606081526000611b7460608301856119dd565b905063ffffffff808451166020840152806020850151166040840152509392505050565b60006001600160401b03821115611bb157611bb161162f565b5060051b60200190565b600060408284031215611bcd57600080fd5b611bd5611645565b905081516001600160401b0380821115611bee57600080fd5b611bfa8583860161191a565b8352602091508184015181811115611c1157600080fd5b8401601f81018613611c2257600080fd5b8051611c306116e382611b98565b81815260059190911b82018401908481019088831115611c4f57600080fd5b8584015b83811015611c8757805186811115611c6b5760008081fd5b611c798b898389010161191a565b845250918601918601611c53565b50808688015250505050505092915050565b60006020808385031215611cac57600080fd5b82516001600160401b0380821115611cc357600080fd5b818501915085601f830112611cd757600080fd5b8151611ce56116e382611b98565b81815260059190911b83018401908481019088831115611d0457600080fd5b8585015b83811015611d3c57805185811115611d205760008081fd5b611d2e8b89838a0101611bbb565b845250918601918601611d08565b5098975050505050505050565b60208152600061053f60208301846119b1565b600060208284031215611d6e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611d9f57611d9f611d75565b5060010190565b600060208284031215611db857600080fd5b81516001600160401b03811115611dce57600080fd5b61031984828501611bbb565b60008219821115611ded57611ded611d75565b500190565b600082821015611e0457611e04611d75565b500390565b60006040808352611e1c818401866119b1565b6020848203818601528186518084528284019150828160051b85010183890160005b83811015611e8e57868303601f1901855281518051898552611e628a8601826119b1565b91880151858303868a0152919050611e7a81836119b1565b968801969450505090850190600101611e3e565b50909a995050505050505050505056fea26469706673582212201bf2e35a98dd99b5f5be87fd92f8b80c3350bef02f4d22a3a9cfe517022ebf3064736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","611acf57600080fd5b611ad7611649565b905081516001600160401b0380821115611af057600080fd5b611afc8583860161191e565b8352602091508184015181811115611b1357600080fd5b8401601f81018613611b2457600080fd5b8051611b326116e782611a9a565b81815260059190911b82018401908481019088831115611b5157600080fd5b8584015b83811015611b8957805186811115611b6d5760008081fd5b611b7b8b898389010161191e565b845250918601918601611b55565b50808688015250505050505092915050565b600060208284031215611bad57600080fd5b81516001600160401b03811115611bc357600080fd5b610b8084828501611abd565b600060208284031215611be157600080fd5b5051919050565b600081518084526020808501808196508360051b810191508286016000805b86811015611c7f578385038a5282516060815160098110611c365763b95aa35560e01b85526021600452602485fd5b875281880151888801829052611c4e828901826119b5565b91505060408083015192508782038189015250611c6b81836119b5565b9b88019b9650505091850191600101611c07565b509298975050505050505050565b602081526000610a5f6020830184611be8565b600060208284031215611cb257600080fd5b815163ffffffff81168114610a5f57600080fd5b606081526000611cd96060830185611be8565b905063ffffffff808451166020840152806020850151166040840152509392505050565b60006020808385031215611d1057600080fd5b82516001600160401b0380821115611d2757600080fd5b818501915085601f830112611d3b57600080fd5b8151611d496116e782611a9a565b81815260059190911b83018401908481019088831115611d6857600080fd5b8585015b83811015611da057805185811115611d845760008081fd5b611d928b89838a0101611abd565b845250918601918601611d6c565b5098975050505050505050565b63b95aa35560e01b600052601160045260246000fd5b6000600019821415611dd757611dd7611dad565b5060010190565b60008219821115611df157611df1611dad565b500190565b600082821015611e0857611e08611dad565b500390565b60006040808352611e20818401866119b5565b6020848203818601528186518084528284019150828160051b85010183890160005b83811015611e9257868303601f1901855281518051898552611e668a8601826119b5565b91880151858303868a0152919050611e7e81836119b5565b968801969450505090850190600101611e42565b50909a995050505050505050505056fea26469706673582212201ba193d0f22755c3569ad0c9ff7c40ea200b9349388e6884749d8f9514ad3f4964736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"create\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wasteSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"InsertStats\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractNum\",\"type\":\"uint256\"}],\"name\":\"add_contract\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNum\",\"type\":\"uint256\"}],\"name\":\"add_reward\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wasteNum\",\"type\":\"uint256\"}],\"name\":\"add_waste\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"month\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"wasteSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idHigh\",\"type\":\"uint256\"}],\"name\":\"select\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wasteSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"internalType\":\"struct StatsData.StatsItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"month\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"month\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contractNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"update_contract\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"update_reward\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"month\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"update_reward\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wasteNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"update_waste\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"month\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"wasteNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"update_waste\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"result\",\"type\":\"int32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADD_CONTRACT = "add_contract";

    public static final String FUNC_ADD_REWARD = "add_reward";

    public static final String FUNC_ADD_WASTE = "add_waste";

    public static final String FUNC_COUNT = "count";

    public static final String FUNC_GETTABLEADDRESS = "getTableAddress";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_UPDATE_CONTRACT = "update_contract";

    public static final String FUNC_UPDATE_REWARD = "update_reward";

    public static final String FUNC_UPDATE_WASTE = "update_waste";

    public static final Event INSERTSTATS_EVENT = new Event("InsertStats", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected StatsData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InsertStatsEventResponse> getInsertStatsEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTSTATS_EVENT, transactionReceipt);
        ArrayList<InsertStatsEventResponse> responses = new ArrayList<InsertStatsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertStatsEventResponse typedResponse = new InsertStatsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.month = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.wasteSum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.rewardSum = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.contractSum = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockNum = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt add_contract(BigInteger month, BigInteger contractNum) {
        final Function function = new Function(
                FUNC_ADD_CONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAdd_contract(BigInteger month, BigInteger contractNum) {
        final Function function = new Function(
                FUNC_ADD_CONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String add_contract(BigInteger month, BigInteger contractNum,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADD_CONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, BigInteger> getAdd_contractInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADD_CONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getAdd_contractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADD_CONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt add_reward(BigInteger month, BigInteger rewardNum) {
        final Function function = new Function(
                FUNC_ADD_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAdd_reward(BigInteger month, BigInteger rewardNum) {
        final Function function = new Function(
                FUNC_ADD_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String add_reward(BigInteger month, BigInteger rewardNum, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADD_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, BigInteger> getAdd_rewardInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADD_REWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getAdd_rewardOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADD_REWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt add_waste(BigInteger month, BigInteger wasteNum) {
        final Function function = new Function(
                FUNC_ADD_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAdd_waste(BigInteger month, BigInteger wasteNum) {
        final Function function = new Function(
                FUNC_ADD_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String add_waste(BigInteger month, BigInteger wasteNum, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADD_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, BigInteger> getAdd_wasteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADD_WASTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getAdd_wasteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADD_WASTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger count(BigInteger month) throws ContractException {
        final Function function = new Function(FUNC_COUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public void count(BigInteger month, CallCallback callback) throws ContractException {
        final Function function = new Function(FUNC_COUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        asyncExecuteCall(function, callback);
    }

    public String getTableAddress() throws ContractException {
        final Function function = new Function(FUNC_GETTABLEADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public void getTableAddress(CallCallback callback) throws ContractException {
        final Function function = new Function(FUNC_GETTABLEADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt insert(String month, BigInteger wasteSum, BigInteger rewardSum,
            BigInteger contractSum, BigInteger blockNum) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForInsert(String month, BigInteger wasteSum,
            BigInteger rewardSum, BigInteger contractSum, BigInteger blockNum) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String insert(String month, BigInteger wasteSum, BigInteger rewardSum,
            BigInteger contractSum, BigInteger blockNum, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractSum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNum)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> getInsertInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<StatsData.StatsItem> select(BigInteger idLow, BigInteger idHigh) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(idLow), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(idHigh)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StatsData.StatsItem>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public void select(BigInteger idLow, BigInteger idHigh, CallCallback callback) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(idLow), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(idHigh)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StatsData.StatsItem>>() {}));
        asyncExecuteCall(function, callback);
    }

    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> select(String month) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public void select(String month, CallCallback callback) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt update_contract(String month, BigInteger contractNum, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_CONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdate_contract(String month, BigInteger contractNum,
            Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_CONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String update_contract(String month, BigInteger contractNum, Boolean add,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE_CONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, BigInteger, Boolean> getUpdate_contractInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE_CONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdate_contractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE_CONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update_reward(BigInteger month, BigInteger rewardNum, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdate_reward(BigInteger month, BigInteger rewardNum,
            Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String update_reward(BigInteger month, BigInteger rewardNum, Boolean add,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<BigInteger, BigInteger, Boolean> getUpdate_rewardUint256Uint256BoolInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdate_rewardUint256Uint256BoolOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update_reward(String month, BigInteger rewardNum, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdate_reward(String month, BigInteger rewardNum,
            Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String update_reward(String month, BigInteger rewardNum, Boolean add,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, BigInteger, Boolean> getUpdate_rewardStringUint256BoolInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdate_rewardStringUint256BoolOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE_REWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update_waste(BigInteger month, BigInteger wasteNum, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdate_waste(BigInteger month, BigInteger wasteNum,
            Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String update_waste(BigInteger month, BigInteger wasteNum, Boolean add,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<BigInteger, BigInteger, Boolean> getUpdate_wasteUint256Uint256BoolInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdate_wasteUint256Uint256BoolOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update_waste(String month, BigInteger wasteNum, Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdate_waste(String month, BigInteger wasteNum,
            Boolean add) {
        final Function function = new Function(
                FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String update_waste(String month, BigInteger wasteNum, Boolean add,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(month), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteNum), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(add)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, BigInteger, Boolean> getUpdate_wasteStringUint256BoolInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdate_wasteStringUint256BoolOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE_WASTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static StatsData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new StatsData(contractAddress, client, credential);
    }

    public static StatsData deploy(Client client, CryptoKeyPair credential, Boolean create) throws
            ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(create)));
        return deploy(StatsData.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class StatsItem extends StaticStruct {
        public BigInteger month;

        public BigInteger wasteSum;

        public BigInteger rewardSum;

        public BigInteger contractSum;

        public BigInteger blockNum;

        public StatsItem(Uint256 month, Uint256 wasteSum, Uint256 rewardSum, Uint256 contractSum,
                Uint256 blockNum) {
            super(month,wasteSum,rewardSum,contractSum,blockNum);
            this.month = month.getValue();
            this.wasteSum = wasteSum.getValue();
            this.rewardSum = rewardSum.getValue();
            this.contractSum = contractSum.getValue();
            this.blockNum = blockNum.getValue();
        }

        public StatsItem(BigInteger month, BigInteger wasteSum, BigInteger rewardSum,
                BigInteger contractSum, BigInteger blockNum) {
            super(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(month),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(wasteSum),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(rewardSum),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(contractSum),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNum));
            this.month = month;
            this.wasteSum = wasteSum;
            this.rewardSum = rewardSum;
            this.contractSum = contractSum;
            this.blockNum = blockNum;
        }
    }

    public static class InsertStatsEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger month;

        public BigInteger wasteSum;

        public BigInteger rewardSum;

        public BigInteger contractSum;

        public BigInteger blockNum;
    }
}
